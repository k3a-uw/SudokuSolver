{"name":"Sudokusolver","tagline":"An intelligent NxN Sudoku Solver designed by Kevin E. Anderson for the sole purpose of the utility of programming.","body":"Overview\r\n--------\r\n\r\nThe intelligent NxN Sudoku Solver will allow a user to select the size of a \r\nSudoku Board (the standard size is 3x3 but any NxN will work.) The system will\r\nallow a user to input any number of starting integers into the board, or allow\r\nthe system to generate one randomly.  The system will then present the user the\r\noption to solve the puzzle on their own, or let the system solve it for them.\r\n\r\nMethod\r\n-------\r\nA brute force method can be used for 3x3 and 4x4 sized boards.  However, the\r\nsearch space grows exponentially and begins to take far too long to solve for\r\nn > 4.  To solve this problem an intelligent design must be implemented.\r\n\r\n### Brute Force\r\nThe brute force approach is simple.  Start in square 0,0 and attempt to place a \r\nthe first integer. (Typically a 1) if it can be placed.  Place it and move on to\r\nsquare 0,1 and try and place the next integer.  If a square is reached and no\r\nintegers can be placed, the square is emptied and the next possible integer is\r\nplaced.  This is a recursive process.\r\n\r\n### Cell Confidence\r\nUsing a confidence measurement for each cell, the system can solve the puzzle\r\nmuch like a human would.  The algorithm will look at each cell and calculate how\r\nmany options exist for populating that cell.  The cells are then ordered by\r\ndescending confidence levels (any 100% confidences played together).  New levels\r\nare then calculated and the process repeats.  If any play is made that results\r\nin a stuck board, (no moves available) previously played pieces are removed.\r\nThis too is a recursive process.\r\n\r\nConsiderations from HCI\r\n-----------------------\r\nThe articles provided for our reading this week altered my decision making only\r\nslightly.  I chose this problem as it is one that I have been thinking about for\r\nsome time and have already completed a brute force algorithm for it.  The UI is\r\nnon-existent and therefore the algorithm provides little value to the public.\r\nThe algorithm was implemented in Java 6 and could be exposed to the web using\r\n.jsp.  The complexity of webdesign using Java as it was described in Plat_forms\r\nled me to the conclusion that I had better implement this tool in PHP.\r\n\r\nMVC Framework\r\n---------\r\n### Model\r\nThe model will consist of several PHP classes:\r\n> 1. SudokuBoard\r\n> 2. SudokuCell\r\n> 3. SudokuMove*\r\n> 4. CellConfidence*\r\n\r\n\r\n *_Simple Data Structure_\r\n \r\n### View\r\nThe view will be constructed using BootStrap 3.2.0.  Some helper classes may\r\nbe constructed to draw certain aspects of the page.  There will be several\r\ncontainers that will be place holders for results of AJAX Calls.\r\n> 1. ViewBoard\r\n> 2. ViewCell\r\n> 3. ViewStatus\r\n> 4. ContainerBoard\r\n> 5. ContainerStatus\r\n\r\n### Controller\r\nThe controller will very simple, as there aren't very many ways to manipulate\r\nthe model of a simple Sudoku puzzle.  Essentially be a series of AJAX calls to\r\ncheck certain moves or to update the board as the solver works to solve the\r\nproblem.\r\n> 1. SendMove\r\n> 2. UpdateBoard\r\n> 3. UpdateStatus\r\n\r\nFolder Structure\r\n----------------\r\n    root/\r\n    \\--bootstrap-3.2.0-dist/  [contains bootstrap framework]\r\n       \\--css/\r\n       \\--fonts/\r\n       \\--js\r\n    \\--inc/                   [contains includes and css]\r\n       \\--ajax/                [includes all ajax response files]\r\n       \\--class/               [includes all class files]\r\n       \\--css/                 [includes all custom css]\r\n    \\--index.php              [main page for user interaction]\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}